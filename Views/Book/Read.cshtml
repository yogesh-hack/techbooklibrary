@model bookstoreapp.Models.Book

@{
    ViewData["Title"] = "Read: " + Model.Title;
}

<div class="read-container">

    <a href="@Url.Action("Details", "Book", new { id = Model.Id })" class="btn btn-secondary">Back to Details</a>
    <h2>@Model.Title</h2>
    <h4>by @Model.Author</h4>
    <p><strong>Description:</strong> @Model.Description</p>
    <hr />

    <div class="flipbook-wrapper">
        <div id="flipbook" class="flipbook">
            <!-- Pages will be added dynamically -->
        </div>
    </div>

    <div class="controls mb-4">
        <button id="prev" class="flip-btn">Previous</button>
        <button id="next" class="flip-btn">Next</button>
    </div>

</div>

<style>
    .read-container {
        margin-top: 20px;
    }

    .flipbook-wrapper {
        position: relative;
        width: 800px;
        height: 600px;
        margin: 0 auto;
        perspective: 2500px;
    }

    #flipbook {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
    }

    .page {
        position: absolute;
        width: 50%;
        height: 100%;
        top: 0;
        background: white;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
        overflow: hidden;
        transform-style: preserve-3d;
        transition: transform 1s ease-in-out;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .page img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

    .left-page {
        left: 0;
        transform-origin: right center;
        z-index: 2;
        border-right: 1px solid #eee;
    }

    .right-page {
        right: 0;
        transform-origin: left center;
        z-index: 1;
        border-left: 1px solid #eee;
    }

    .flipping {
        z-index: 10;
        transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .controls {
        margin-top: 20px;
    }

    .flip-btn {
        padding: 10px 20px;
        margin: 0 10px;
        background-color: #333;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

        .flip-btn:hover {
            background-color: #555;
        }

        .flip-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
<script>
    // State management
    const state = {
        currentSpread: 0,
        pageCount: 0,
        isFlipping: false,
        pdfDoc: null
    };

    // DOM elements
    const elements = {
        flipbook: document.getElementById('flipbook'),
        prevBtn: document.getElementById('prev'),
        nextBtn: document.getElementById('next')
    };

    // Initialize PDF viewer
    pdfjsLib.getDocument('@Model.PdfUrl').promise
        .then(pdf => {
            state.pdfDoc = pdf;
            state.pageCount = pdf.numPages;
            renderSpread();
        })
        .catch(error => {
            // Show fallback UI
            const flipbook = document.getElementById('flipbook');
            flipbook.innerHTML = `
                <div style="text-align:center; padding: 100px; font-size: 24px; color: red;">
                    <i class="fa-solid fa-triangle-exclamation"></i> PDF is not available.
                </div>
            `;

            // Disable navigation buttons
            document.getElementById('prev').disabled = true;
            document.getElementById('next').disabled = true;

            console.error("Error loading PDF:", error);
        });


    // Render current spread
    async function renderSpread() {
        elements.flipbook.innerHTML = '';

        const leftPageNum = state.currentSpread * 2 + 1;
        const rightPageNum = state.currentSpread * 2 + 2;

        // Left page
        if (leftPageNum <= state.pageCount) {
            const leftPage = await createPage(leftPageNum, 'left-page');
            elements.flipbook.appendChild(leftPage);
        }

        // Right page
        if (rightPageNum <= state.pageCount) {
            const rightPage = await createPage(rightPageNum, 'right-page');
            elements.flipbook.appendChild(rightPage);
        }

        updateNavigation();
    }

    // Create a page element
    async function createPage(pageNum, className) {
        const page = await state.pdfDoc.getPage(pageNum);
        const viewport = page.getViewport({ scale: 1.5 });
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = viewport.width;
        canvas.height = viewport.height;

        await page.render({
            canvasContext: context,
            viewport: viewport
        }).promise;

        const pageDiv = document.createElement('div');
        pageDiv.className = `page ${className}`;

        const img = new Image();
        img.src = canvas.toDataURL();
        pageDiv.appendChild(img);

        return pageDiv;
    }

    // Flip to next spread
    async function flipNext() {
        if (state.isFlipping || state.currentSpread >= Math.floor((state.pageCount - 1) / 2)) return;

        state.isFlipping = true;
        disableNavigation();

        const rightPage = document.querySelector('.right-page');
        if (rightPage) {
            rightPage.classList.add('flipping');
            rightPage.style.transform = 'rotateY(-180deg)';

            rightPage.addEventListener('transitionend', () => {
                state.currentSpread++;
                renderSpread();
                state.isFlipping = false;
            }, { once: true });
        } else {
            state.isFlipping = false;
        }
    }

    // Flip to previous spread
    async function flipPrev() {
        if (state.isFlipping || state.currentSpread <= 0) return;

        state.isFlipping = true;
        disableNavigation();

        const leftPage = document.querySelector('.left-page');
        if (leftPage) {
            leftPage.classList.add('flipping');
            leftPage.style.transform = 'rotateY(180deg)';

            leftPage.addEventListener('transitionend', () => {
                state.currentSpread--;
                renderSpread();
                state.isFlipping = false;
            }, { once: true });
        } else {
            state.isFlipping = false;
        }
    }

    // Update navigation buttons
    function updateNavigation() {
        elements.prevBtn.disabled = state.currentSpread <= 0;
        elements.nextBtn.disabled = state.currentSpread >= Math.floor((state.pageCount - 1) / 2);
    }

    // Disable navigation during flip
    function disableNavigation() {
        elements.prevBtn.disabled = true;
        elements.nextBtn.disabled = true;
    }

    // Event listeners
    elements.prevBtn.addEventListener('click', flipPrev);
    elements.nextBtn.addEventListener('click', flipNext);

    // Click to flip
    elements.flipbook.addEventListener('click', (e) => {
        const rect = elements.flipbook.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        if (clickX > rect.width / 2) flipNext();
        else flipPrev();
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight') flipNext();
        if (e.key === 'ArrowLeft') flipPrev();
    });
</script>